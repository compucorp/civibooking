<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from uk.co.compucorp.civicrm.booking/xml/schema/CRM/Booking/Booking.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:7ca8047fd1f7ffecf52593c14cc6dc75)
 */
use CRM_Booking_ExtensionUtil as E;

/**
 * Database access object for the Booking entity.
 */
class CRM_Booking_DAO_Booking extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_booking';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * @var int
   */
  public $id;

  /**
   * FK to Contact ID
   *
   * @var int
   */
  public $primary_contact_id;

  /**
   * FK to Contact ID
   *
   * @var int
   */
  public $secondary_contact_id;

  /**
   * @var string
   */
  public $title;

  /**
   * The status associated with this booking. Implicit FK to option_value row in booking status option_group.
   *
   * @var int
   */
  public $status_id;

  /**
   * @var datetime
   */
  public $booking_date;

  /**
   * @var datetime
   */
  public $start_date;

  /**
   * @var datetime
   */
  public $end_date;

  /**
   * @var string
   */
  public $po_number;

  /**
   * Total amount of this booking calculated from slots,sub slots, ad-hoc charges and discount amount
   *
   * @var float
   */
  public $total_amount;

  /**
   * @var string
   */
  public $description;

  /**
   * @var text
   */
  public $note;

  /**
   * @var text
   */
  public $adhoc_charges_note;

  /**
   * @var string
   */
  public $participants_estimate;

  /**
   * @var string
   */
  public $participants_actual;

  /**
   * @var float
   */
  public $discount_amount;

  /**
   * @var bool
   */
  public $is_deleted;

  /**
   * @var int
   */
  public $created_by;

  /**
   * @var datetime
   */
  public $created_date;

  /**
   * @var int
   */
  public $updated_by;

  /**
   * @var datetime
   */
  public $updated_date;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_booking';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Bookings') : E::ts('Booking');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'primary_contact_id', 'civicrm_contact', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'secondary_contact_id', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'required' => TRUE,
          'where' => 'civicrm_booking.id',
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'primary_contact_id' => [
          'name' => 'primary_contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Primary Contact ID'),
          'description' => E::ts('FK to Contact ID'),
          'required' => TRUE,
          'import' => TRUE,
          'where' => 'civicrm_booking.primary_contact_id',
          'headerPattern' => '/contact(.?id)?/i',
          'dataPattern' => '/^\d+$/',
          'export' => TRUE,
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'add' => '4.4',
        ],
        'secondary_contact_id' => [
          'name' => 'secondary_contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Secondary Contact ID'),
          'description' => E::ts('FK to Contact ID'),
          'required' => FALSE,
          'import' => TRUE,
          'where' => 'civicrm_booking.secondary_contact_id',
          'headerPattern' => '/contact(.?id)?/i',
          'dataPattern' => '/^\d+$/',
          'export' => TRUE,
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'add' => '4.4',
        ],
        'booking_title' => [
          'name' => 'title',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Title'),
          'required' => TRUE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_booking.title',
          'export' => TRUE,
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'booking_status_id' => [
          'name' => 'status_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Status ID'),
          'description' => E::ts('The status associated with this booking. Implicit FK to option_value row in booking status option_group.'),
          'required' => TRUE,
          'where' => 'civicrm_booking.status_id',
          'export' => TRUE,
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'pseudoconstant' => [
            'optionGroupName' => 'booking_status',
            'optionEditPath' => 'civicrm/admin/options/booking_status',
          ],
          'add' => '4.4',
        ],
        'booking_date' => [
          'name' => 'booking_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Booking Date'),
          'required' => TRUE,
          'where' => 'civicrm_booking.booking_date',
          'export' => TRUE,
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'booking_start_date' => [
          'name' => 'start_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Start Date'),
          'required' => TRUE,
          'where' => 'civicrm_booking.start_date',
          'export' => TRUE,
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'booking_end_date' => [
          'name' => 'end_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('End Date'),
          'required' => TRUE,
          'where' => 'civicrm_booking.end_date',
          'export' => TRUE,
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'booking_po_number' => [
          'name' => 'po_number',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('PO Number'),
          'required' => TRUE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_booking.po_number',
          'export' => TRUE,
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'total_amount' => [
          'name' => 'total_amount',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Total amount'),
          'description' => E::ts('Total amount of this booking calculated from slots,sub slots, ad-hoc charges and discount amount'),
          'required' => TRUE,
          'precision' => [
            20,
            2,
          ],
          'import' => TRUE,
          'where' => 'civicrm_booking.total_amount',
          'export' => TRUE,
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'description' => [
          'name' => 'description',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Description'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_booking.description',
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'note' => [
          'name' => 'note',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Note'),
          'where' => 'civicrm_booking.note',
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'adhoc_charges_note' => [
          'name' => 'adhoc_charges_note',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Adhoc Charges Note'),
          'where' => 'civicrm_booking.adhoc_charges_note',
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'participants_estimate' => [
          'name' => 'participants_estimate',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Participants Estimate'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_booking.participants_estimate',
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'participants_actual' => [
          'name' => 'participants_actual',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Participants Actual'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_booking.participants_actual',
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'discount_amount' => [
          'name' => 'discount_amount',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Discount Amount'),
          'precision' => [
            20,
            2,
          ],
          'where' => 'civicrm_booking.discount_amount',
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'booking_is_deleted' => [
          'name' => 'is_deleted',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Booking is in the Trash'),
          'import' => TRUE,
          'where' => 'civicrm_booking.is_deleted',
          'export' => TRUE,
          'default' => '0',
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'created_by' => [
          'name' => 'created_by',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Created By'),
          'required' => TRUE,
          'where' => 'civicrm_booking.created_by',
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'created_date' => [
          'name' => 'created_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Created Date'),
          'required' => TRUE,
          'where' => 'civicrm_booking.created_date',
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'updated_by' => [
          'name' => 'updated_by',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Updated By'),
          'required' => TRUE,
          'where' => 'civicrm_booking.updated_by',
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
        'updated_date' => [
          'name' => 'updated_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Updated Date'),
          'required' => TRUE,
          'where' => 'civicrm_booking.updated_date',
          'table_name' => 'civicrm_booking',
          'entity' => 'Booking',
          'bao' => 'CRM_Booking_DAO_Booking',
          'localizable' => 0,
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'booking', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'booking', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'index_is_deleted' => [
        'name' => 'index_is_deleted',
        'field' => [
          0 => 'is_deleted',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_booking::0::is_deleted',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
