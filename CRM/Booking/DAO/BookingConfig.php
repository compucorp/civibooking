<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from uk.co.compucorp.civicrm.booking/xml/schema/CRM/Booking/BookingConfig.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:7040c01e0bedb6e326f89639f20216c9)
 */
use CRM_Booking_ExtensionUtil as E;

/**
 * Database access object for the BookingConfig entity.
 */
class CRM_Booking_DAO_BookingConfig extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_booking_config';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * @var int
   */
  public $id;

  /**
   * @var int
   */
  public $domain_id;

  /**
   * @var time
   */
  public $day_start_at;

  /**
   * @var time
   */
  public $day_end_at;

  /**
   * @var int
   */
  public $time_period;

  /**
   * Create an activity record againt contact for conformation emails
   *
   * @var bool
   */
  public $log_confirmation_email;

  /**
   * Only allow unlimited resources to be booked within time span of the parent limited resource booking
   *
   * @var bool
   */
  public $unlimited_resource_time_config;

  /**
   * @var string
   */
  public $cc_email_address;

  /**
   * @var string
   */
  public $bcc_email_address;

  /**
   * @var string
   */
  public $slot_new_colour;

  /**
   * @var string
   */
  public $slot_being_edited_colour;

  /**
   * @var string
   */
  public $slot_booked_colour;

  /**
   * @var string
   */
  public $slot_provisional_colour;

  /**
   * @var string
   */
  public $slot_unavailable_colour;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_booking_config';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Booking Configs') : E::ts('Booking Config');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'required' => TRUE,
          'where' => 'civicrm_booking_config.id',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'domain_id' => [
          'name' => 'domain_id',
          'type' => CRM_Utils_Type::T_INT,
          'where' => 'civicrm_booking_config.domain_id',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'add' => NULL,
        ],
        'day_start_at' => [
          'name' => 'day_start_at',
          'type' => CRM_Utils_Type::T_TIME,
          'title' => E::ts('Day Start At'),
          'required' => TRUE,
          'where' => 'civicrm_booking_config.day_start_at',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'add' => NULL,
        ],
        'day_end_at' => [
          'name' => 'day_end_at',
          'type' => CRM_Utils_Type::T_TIME,
          'title' => E::ts('Day End At'),
          'required' => TRUE,
          'where' => 'civicrm_booking_config.day_end_at',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'add' => NULL,
        ],
        'time_period' => [
          'name' => 'time_period',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Time Period'),
          'required' => TRUE,
          'where' => 'civicrm_booking_config.time_period',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'add' => NULL,
        ],
        'log_confirmation_email' => [
          'name' => 'log_confirmation_email',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Log Confirmation Email'),
          'description' => E::ts('Create an activity record againt contact for conformation emails'),
          'required' => TRUE,
          'where' => 'civicrm_booking_config.log_confirmation_email',
          'default' => '0',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'add' => NULL,
        ],
        'unlimited_resource_time_config' => [
          'name' => 'unlimited_resource_time_config',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Unlimited Resource Time Config'),
          'description' => E::ts('Only allow unlimited resources to be booked within time span of the parent limited resource booking'),
          'required' => TRUE,
          'where' => 'civicrm_booking_config.unlimited_resource_time_config',
          'default' => '1',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'add' => NULL,
        ],
        'cc_email_address' => [
          'name' => 'cc_email_address',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Cc Email Address'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_booking_config.cc_email_address',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'add' => NULL,
        ],
        'bcc_email_address' => [
          'name' => 'bcc_email_address',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Bcc Email Address'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_booking_config.bcc_email_address',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'add' => NULL,
        ],
        'slot_new_colour' => [
          'name' => 'slot_new_colour',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Slot New Colour'),
          'maxlength' => 10,
          'size' => CRM_Utils_Type::TWELVE,
          'where' => 'civicrm_booking_config.slot_new_colour',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'add' => NULL,
        ],
        'slot_being_edited_colour' => [
          'name' => 'slot_being_edited_colour',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Slot Being Edited Colour'),
          'maxlength' => 10,
          'size' => CRM_Utils_Type::TWELVE,
          'where' => 'civicrm_booking_config.slot_being_edited_colour',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'add' => NULL,
        ],
        'slot_booked_colour' => [
          'name' => 'slot_booked_colour',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Slot Booked Colour'),
          'maxlength' => 10,
          'size' => CRM_Utils_Type::TWELVE,
          'where' => 'civicrm_booking_config.slot_booked_colour',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'add' => NULL,
        ],
        'slot_provisional_colour' => [
          'name' => 'slot_provisional_colour',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Slot Provisional Colour'),
          'maxlength' => 10,
          'size' => CRM_Utils_Type::TWELVE,
          'where' => 'civicrm_booking_config.slot_provisional_colour',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'add' => NULL,
        ],
        'slot_unavailable_colour' => [
          'name' => 'slot_unavailable_colour',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Slot Unavailable Colour'),
          'maxlength' => 10,
          'size' => CRM_Utils_Type::TWELVE,
          'where' => 'civicrm_booking_config.slot_unavailable_colour',
          'table_name' => 'civicrm_booking_config',
          'entity' => 'BookingConfig',
          'bao' => 'CRM_Booking_DAO_BookingConfig',
          'localizable' => 0,
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'booking_config', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'booking_config', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
